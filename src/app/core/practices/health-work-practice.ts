// Практика "Работа со здоровьем"

import { PracticeContext, PracticeConfig } from '../models/practice-engine.types';
import { step, input, repeat, rating, choice, stepWithButtons } from './practice-blocks';

/**
 * Практика "Работа со здоровьем"
 */
export async function* healthWorkPractice(context: PracticeContext) {
  // Шаг 1: Ощущение
  yield step(
    'feeling',
    'Шаг 1: Ощущение',
    'Почувствуй пространство, себя и свое тело.'
  );
  
  // Шаг 2: Определение недуга
  yield input(
    'health-problem',
    'Шаг 2: Определение проблемы',
    'С каким физическим недугом ты бы хотел поработать?',
    'healthProblem',
    'textarea',
    'Опишите ваш физический недуг...'
  );
  
  // Шаг 3: Внутренняя реакция
  yield input(
    'internal-reaction',
    'Шаг 3: Внутренняя реакция',
    'Отметь, что включается в твоем внутреннем пространстве, когда ты думаешь о {{healthProblem}}?\n\nЛюбая наша реакция, которая включается, когда мы думаем о физическом недуге - неисправленное намерение внутри нашей нехватки, которое чаще всего этот недуг и вызывает. Осознай это.',
    'internalReaction',
    'textarea',
    'Опишите, что включается в вас...'
  );
  
  // Шаг 4: Поиск нехватки
  yield step(
    'find-lack',
    'Шаг 4: Поиск желания',
    'Удерживая свою реакцию, найди это желание и почувствуй в нем не исправленное намерение.'
  );
  
  // Шаг 5: Исправление намерения
  yield repeat(
    'correct-intention',
    'Шаг 5: Исправление намерения',
    'Проси Творца исправить это намерение в желании всей системы, всех людей, кто страдает от такой же проблемы.',
    'Творец, исправь намерения внутри нашего общего желания из получения ради себя в получение ради отдачи, ради тебя, приблизь нас к себе и наполни эту нехватку благом и наслаждением.'
  );
  
  // Шаг 6: Проверка сопротивления с простыми кнопками
  yield stepWithButtons(
    'resistance-check',
    'Шаг 6: Проверка сопротивления',
    'Есть ли кто-то или что-то, что сопротивляется решению этой проблемы? Другие люди, существа, внутренние состояния.',
    [
      {
        text: 'Да',
        value: 'yes',
        targetStepId: 'mercy',
        saveValue: true
      },
      {
        text: 'Нет',
        value: 'no',
        targetStepId: 'unite-all',
        saveValue: true
      }
    ]
  );

  // Шаг 7: Милосердие (только при выборе "Да")
  yield step(
    'mercy',
    'Шаг 7: Милосердие',
    'Представь, что берешь за руку того или то, что сопротивляется решению. Прояви милосердие. Поставь руку на грудь. Почувствуй, какие нехватки он испытывает. Включи его и его ненаполненные желания в себя, присоедини их к себе для проработки.'
  );

  // Шаг 8: Исправление для всех
  yield repeat(
    'correct-all',
    'Шаг 8: Исправление для всех',
    'Проси Творца:',
    'Творец, исправь намерения внутри наших желаний и нехваток из получения ради себя в получение ради отдачи, ради тебя, приблизь нас к себе и наполни наши нехватки благом и наслаждением.'
  );
  
  // Шаг 9: Соединение всех участников
  yield repeat(
    'unite-all',
    'Шаг 9: Соединение всех участников',
    'Почувствуй еще раз всех участников, включенных в проблему, все их сосуды. Проговаривай:',
    'Все, что существует внутри этой системы, включая эту проблему - и есть Творец.'
  );
  
  // Шаг 10: Благодарность
  yield step(
    'gratitude',
    'Шаг 10: Благодарность',
    'Вырази благодарность Творцу в меру получения облегчения и изменения. "Благодарю за это общение".'
  );
  
  // Шаг 11: Оценка
  yield rating(
    'final-rating',
    'Шаг 11: Оценка',
    'Во сколько баллов оценишь эту проработку?',
    true // финальный шаг
  );
}

// Конфигурация практики
export const healthWorkPracticeConfig: PracticeConfig = {
  id: 'health-work',
  title: 'Работа со здоровьем',
  description: 'Практика для работы с физическими недугами через исправление внутренних намерений и включение в общую систему.',
  
  hasStartScreen: true,
  startScreenContent: {
    title: 'Работа со здоровьем',
    description: 'Практика для работы с физическими недугами через исправление внутренних намерений и включение в общую систему.',
    duration: '20 мин',
    level: 'Средний'
  },
  
  practiceFunction: healthWorkPractice,
  
  onFinish: async (context, result) => {
    const practiceRecord = {
      name: 'Работа со здоровьем',
      route: '/practices/runner/health-work',
      completedAt: new Date().toISOString(),
      result
    };
    
    localStorage.setItem('lastPractice', JSON.stringify(practiceRecord));
    console.log('Health work practice completed with result:', result);
  }
};
