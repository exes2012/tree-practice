import { Component, OnDestroy } from '@angular/core';
import { CommonModule, Location } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-breathing-joy-practice',
  templateUrl: './breathing-joy-practice.component.html',
  standalone: true,
  imports: [CommonModule, FormsModule]
})
export class BreathingJoyPracticeComponent implements OnDestroy {
  isPracticeStarted = false;
  currentStepIndex = 0;
  isVoiceEnabled = false;
  userRating = 5;

  // Interactive breathing properties
  isBreathingActive = false;
  breathingState: 'stopped' | 'inhale' | 'hold' | 'exhale' | 'pause' = 'stopped';
  breathingTimer = 0;
  breathingInterval: any;
  breathingCycles = 0;
  breathingPhaseTimer = 0;
  breathingPhaseInterval: any;

  practiceSteps = [
    { 
      title: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞', 
      instruction: '–¶–∞—Ä—å –î–∞–≤–∏–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∫–Ω–∏–≥—É –¢–µ–∏–ª–∏–º —Å—Ç–∏—Ö–æ–º: ¬´–ö–∞–∂–¥–∞—è –¥—É—à–∞, –≤–æ–∑–¥–∞–π —Ö–≤–∞–ª—É –ë–æ–≥—É –ê–ª–µ–ª—É-–π—è¬ª. –ù–∞ —Å–≤—è—Ç–æ–º —è–∑—ã–∫–µ —Å–ª–æ–≤–∞ ¬´–¥—É—à–∞¬ª –∏ ¬´–¥—ã—Ö–∞–Ω–∏–µ¬ª –æ—á–µ–Ω—å –±–ª–∏–∑–∫–∏ ‚Äì –Ω–µ—à–∞–º–∞ –∏ –Ω–µ—à–∏–º–∞.',
      stage: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
      stageColor: 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200'
    },
    { 
      title: '–î—ã—Ö–∞–Ω–∏–µ —Ö–≤–∞–ª—ã', 
      instruction: '–≠—Ç–æ—Ç —Å—Ç–∏—Ö –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ ¬´–ö–∞–∂–¥–æ–µ –¥—ã—Ö–∞–Ω–∏–µ, –≤–æ–∑–¥–∞–π —Ö–≤–∞–ª—É –ë–æ–≥—É –ê–ª–µ–ª—É-–π—è¬ª. –î–∞–≤–∞–π—Ç–µ –≥–ª—É–±–æ–∫–æ –¥—ã—à–∞—Ç—å –∏ —Å–ª–∞–≤–∏—Ç—å –ë–æ–≥–∞ —Å –∫–∞–∂–¥—ã–º –¥—ã—Ö–∞–Ω–∏–µ–º.',
      stage: '–•–≤–∞–ª–∞',
      stageColor: 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200'
    },
    { 
      title: '–û—â—É—â–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è', 
      instruction: '–° –∫–∞–∂–¥—ã–º –¥—ã—Ö–∞–Ω–∏–µ–º —è —á—É–≤—Å—Ç–≤—É—é –¢–≤–æ–µ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ. –° –∫–∞–∂–¥—ã–º –¥—ã—Ö–∞–Ω–∏–µ–º —è –≤—ã—Ä–∞–∂–∞—é –¢–µ–±–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –¢–≤–æ–π –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–π –¥–∞—Ä –º–Ω–µ ‚Äì –∂–∏–∑–Ω—å.',
      stage: '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ',
      stageColor: 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200'
    },
    { 
      title: '–°–ª–æ–≤–æ —Ä–∞–¥–æ—Å—Ç—å', 
      instruction: '–¢–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º –¥—ã—à–∞—Ç—å —Ä–∞–¥–æ—Å—Ç—å—é. –í–¥–æ—Ö–Ω–µ–º –≤ –Ω–∞—à—É –∂–∏–∑–Ω—å —Ä–∞–¥–æ—Å—Ç—å. –°–ª–æ–≤–æ ¬´—Ä–∞–¥–æ—Å—Ç—å¬ª –Ω–∞ –∏–≤—Ä–∏—Ç–µ ‚Äì —Ö–µ–¥–≤–∞. –û–Ω–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö –±—É–∫–≤ —Ö–µ—Ç, –¥–∞–ª–µ—Ç, –≤–∞–≤ –∏ —Ö–µ–π: ◊ó ◊ì ◊ï ◊î',
      stage: '–†–∞–¥–æ—Å—Ç—å',
      stageColor: 'bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200'
    },
    { 
      title: '–ß–µ—Ç—ã—Ä–µ —ç—Ç–∞–ø–∞ –¥—ã—Ö–∞–Ω–∏—è', 
      instruction: '–ö–∞–∂–¥—ã–π –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —ç—Ç–∞–ø–æ–≤: –≤–¥–æ—Ö, —É–¥–µ—Ä–∂–∏–≤–∞–Ω–∏–µ, –≤—ã–¥–æ—Ö –∏ –æ—Ç–¥—ã—Ö. –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–∫–≤ —Å–ª–æ–≤–∞ —Ö–µ–¥–≤–∞ ‚Äì 8, 4, 6 –∏ 5.',
      stage: '–≠—Ç–∞–ø—ã',
      stageColor: 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200'
    },
    { 
      title: '–ü—Ä–∞–∫—Ç–∏–∫–∞ –¥—ã—Ö–∞–Ω–∏—è', 
      instruction: '–í–¥–æ—Ö –Ω–∞ —Å—á–µ—Ç 8 (—Ö–µ—Ç), —É–¥–µ—Ä–∂–∏–≤–∞–Ω–∏–µ –Ω–∞ —Å—á–µ—Ç 4 (–¥–∞–ª–µ—Ç), –≤—ã–¥–æ—Ö –Ω–∞ —Å—á–µ—Ç 6 (–≤–∞–≤), –æ—Ç–¥—ã—Ö –Ω–∞ —Å—á–µ—Ç 5 (—Ö–µ–π). –î—ã—à–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 8:4:6:5.',
      stage: '–î—ã—Ö–∞–Ω–∏–µ',
      stageColor: 'bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-200'
    },
    { 
      title: '–û—â—É—â–µ–Ω–∏–µ –∂–∏–∑–Ω–∏', 
      instruction: '–û—â—É—â–∞—Ç—å –∂–∏–∑–Ω—å ‚Äì –∑–Ω–∞—á–∏—Ç –æ—â—É—â–∞—Ç—å —Ä–∞–¥–æ—Å—Ç—å. –≠—Ç–æ —Ä–∞–¥–æ—Å—Ç—å –æ—Ç –æ—â—É—â–µ–Ω–∏—è —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–π –°–æ–∑–¥–∞—Ç–µ–ª—å –≤–¥—ã—Ö–∞–µ—Ç –≤ –º–æ–∏ –Ω–æ–∑–¥—Ä–∏ –¥—ã—Ö–∞–Ω–∏–µ –∂–∏–∑–Ω–∏. –° –∫–∞–∂–¥—ã–º –¥—ã—Ö–∞–Ω–∏–µ–º —è —Å–ª–∞–≤–ª—é –ï–≥–æ.',
      stage: '–ñ–∏–∑–Ω—å',
      stageColor: 'bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200'
    }
  ];

  constructor(private location: Location) {}

  ngOnDestroy() {
    window.speechSynthesis.cancel();
    this.stopBreathing();
  }

  goBack() {
    window.speechSynthesis.cancel();
    this.location.back();
  }

  toggleVoice() {
    this.isVoiceEnabled = !this.isVoiceEnabled;
    if (!this.isVoiceEnabled) {
      window.speechSynthesis.cancel();
    }
  }

  speak(text: string) {
    if (this.isVoiceEnabled && 'speechSynthesis' in window) {
      window.speechSynthesis.cancel();
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'ru-RU';
      utterance.rate = 0.8;
      window.speechSynthesis.speak(utterance);
    }
  }

  startPractice() {
    this.isPracticeStarted = true;
    this.currentStepIndex = 0;
    this.speak(this.practiceSteps[0].instruction);
  }

  nextStep() {
    this.stopBreathing(); // Stop breathing when navigating
    if (this.currentStepIndex < this.practiceSteps.length - 1) {
      this.currentStepIndex++;
      if (!this.isBreathingStep()) {
        this.speak(this.practiceSteps[this.currentStepIndex].instruction);
      }
    }
  }

  previousStep() {
    this.stopBreathing(); // Stop breathing when navigating
    if (this.currentStepIndex > 0) {
      this.currentStepIndex--;
      if (!this.isBreathingStep()) {
        this.speak(this.practiceSteps[this.currentStepIndex].instruction);
      }
    }
  }

  finishPractice() {
    this.currentStepIndex = this.practiceSteps.length; // Move to rating step
    window.speechSynthesis.cancel();
  }

  exitPractice() {
    this.location.back();
  }

  getRatingFace(): string {
    if (this.userRating == 10) return 'ü§©';
    if (this.userRating >= 9) return 'üòÅ';
    if (this.userRating >= 8) return 'üòÑ';
    if (this.userRating >= 7) return 'üòä';
    if (this.userRating >= 6) return 'üôÇ';
    if (this.userRating >= 5) return 'üòê';
    if (this.userRating >= 4) return 'üòï';
    if (this.userRating >= 3) return 'üòü';
    if (this.userRating >= 2) return 'üò¢';
    return 'üò≠';
  }

  // Interactive breathing methods
  startBreathing() {
    this.isBreathingActive = true;
    this.breathingTimer = 0;
    this.breathingCycles = 0;
    this.startBreathingCycle();

    // Start main timer
    this.breathingInterval = setInterval(() => {
      this.breathingTimer++;
    }, 1000);
  }

  stopBreathing() {
    this.isBreathingActive = false;
    this.breathingState = 'stopped';

    if (this.breathingInterval) {
      clearInterval(this.breathingInterval);
    }
    if (this.breathingPhaseInterval) {
      clearInterval(this.breathingPhaseInterval);
    }

    window.speechSynthesis.cancel();
  }

  private startBreathingCycle() {
    if (!this.isBreathingActive) return;

    this.breathingCycles++;
    this.startInhale();
  }

  private startInhale() {
    this.breathingState = 'inhale';
    this.breathingPhaseTimer = 8;
    this.speakWithStress('–í–¥–æ—Ö');

    this.breathingPhaseInterval = setInterval(() => {
      this.breathingPhaseTimer--;
      if (this.breathingPhaseTimer <= 0) {
        clearInterval(this.breathingPhaseInterval);
        this.startHold();
      }
    }, 1000);
  }

  private startHold() {
    this.breathingState = 'hold';
    this.breathingPhaseTimer = 4;
    // Try phonetic spelling for better pronunciation
    this.speakWithStress('–ó–∞–¥–µ—Ä–∂–∏ÃÅ—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ');

    this.breathingPhaseInterval = setInterval(() => {
      this.breathingPhaseTimer--;
      if (this.breathingPhaseTimer <= 0) {
        clearInterval(this.breathingPhaseInterval);
        this.startExhale();
      }
    }, 1000);
  }

  private startExhale() {
    this.breathingState = 'exhale';
    this.breathingPhaseTimer = 6;
    this.speakWithStress('–í—ãÃÅ–¥–æ—Ö');

    this.breathingPhaseInterval = setInterval(() => {
      this.breathingPhaseTimer--;
      if (this.breathingPhaseTimer <= 0) {
        clearInterval(this.breathingPhaseInterval);
        this.startPause();
      }
    }, 1000);
  }

  private startPause() {
    this.breathingState = 'pause';
    this.breathingPhaseTimer = 5;
    this.speakWithStress('–û—Ç–¥—ã—Ö');

    this.breathingPhaseInterval = setInterval(() => {
      this.breathingPhaseTimer--;
      if (this.breathingPhaseTimer <= 0) {
        clearInterval(this.breathingPhaseInterval);
        this.startBreathingCycle(); // Start next cycle
      }
    }, 1000);
  }

  getBreathingStateText(): string {
    switch (this.breathingState) {
      case 'inhale': return '–í–¥–æ—Ö';
      case 'hold': return '–ó–∞–¥–µ—Ä–∂–∏ÃÅ—Ç–µ';
      case 'exhale': return '–í—ãÃÅ–¥–æ—Ö';
      case 'pause': return '–û—Ç–¥—ã—Ö';
      default: return '–ì–æ—Ç–æ–≤ –∫ –Ω–∞—á–∞–ª—É';
    }
  }

  getFormattedTimer(): string {
    const minutes = Math.floor(this.breathingTimer / 60);
    const seconds = this.breathingTimer % 60;
    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
  }

  isBreathingStep(): boolean {
    return this.currentStepIndex === 5; // "–ü—Ä–∞–∫—Ç–∏–∫–∞ –¥—ã—Ö–∞–Ω–∏—è" step
  }

  private speakWithStress(text: string) {
    if (!this.isVoiceEnabled) return;

    // Create pronunciation map for better speech
    const pronunciationMap: { [key: string]: string } = {
      '–ó–∞–¥–µ—Ä–∂–∏ÃÅ—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ': '–ó–∞–¥–µ—Ä–∂–∏—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ',
      '–í—ãÃÅ–¥–æ—Ö': '–í—ã–¥–æ—Ö',
      '–û—Ç–¥—ã—Ö': '–û—Ç–¥—ã—Ö',
      '–í–¥–æ—Ö': '–í–¥–æ—Ö'
    };

    // Use mapped pronunciation or original text
    const speechText = pronunciationMap[text] || text.replace(/ÃÅ/g, '');

    // Create utterance with optimized settings
    const utterance = new SpeechSynthesisUtterance(speechText);
    utterance.lang = 'ru-RU';
    utterance.rate = 0.7; // Slower for meditation
    utterance.pitch = 1.0;
    utterance.volume = 0.9;

    // Try to find the best Russian voice
    const voices = speechSynthesis.getVoices();
    const russianVoice = voices.find(voice =>
      voice.lang.startsWith('ru') ||
      voice.name.toLowerCase().includes('russian') ||
      voice.name.toLowerCase().includes('ru')
    );

    if (russianVoice) {
      utterance.voice = russianVoice;
    }

    // Add slight pause before speaking for better timing
    setTimeout(() => {
      window.speechSynthesis.cancel();
      window.speechSynthesis.speak(utterance);
    }, 100);
  }
}
