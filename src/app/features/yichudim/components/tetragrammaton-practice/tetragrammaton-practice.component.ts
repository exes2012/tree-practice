import { Component, OnDestroy } from '@angular/core';
import { CommonModule, Location } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-tetragrammaton-practice',
  templateUrl: './tetragrammaton-practice.component.html',
  standalone: true,
  imports: [CommonModule, FormsModule]
})
export class TetragrammatonPracticeComponent implements OnDestroy {
  isPracticeStarted = false;
  currentStepIndex = 0;
  isVoiceEnabled = false;
  userRating = 5;

  practiceSteps = [
    { 
      title: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞', 
      instruction: '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –ò–º—è –ë–æ–≥–∞ –æ–±—ã—á–Ω–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ¬´–¢–µ—Ç—Ä–∞–≥—Ä–∞–º–º–∞—Ç–æ–Ω¬ª, —Å–æ–≥–ª–∞—Å–Ω–æ –º—É–¥—Ä–µ—Ü–∞–º, –Ω–∞–∑—ã–≤–∞–≤—à–∏–º –µ–≥–æ ¬´–ß–µ—Ç—ã—Ä–µ—Ö–±—É–∫–≤–µ–Ω–Ω—ã–º –ò–º–µ–Ω–µ–º¬ª. –ù–∞ –∏–≤—Ä–∏—Ç–µ –µ–≥–æ –Ω–∞–∑—ã–≤–∞—é—Ç ¬´–ò–º—è –ê–≤–∞–π–µ¬ª.',
      stage: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
      stageColor: 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200'
    },
    { 
      title: '–ó–Ω–∞—á–µ–Ω–∏–µ –ò–º–µ–Ω–∏', 
      instruction: '–•–æ—Ç—è –°—É—Ç—å —ç—Ç–æ–≥–æ –ò–º–µ–Ω–∏ –≤—ã—à–µ –ª—é–±–æ–≥–æ —Ä–∞–∑—É–º–µ–Ω–∏—è, –æ–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç –∏–≤—Ä–∏—Ç—Å–∫–æ–≥–æ –∫–æ—Ä–Ω—è, –æ–∑–Ω–∞—á–∞—é—â–µ–≥–æ ¬´–±—ã—Ç—å¬ª –∏–ª–∏ ¬´–ø—Ä–∏–≤–æ–¥–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã—Ç–∏—è¬ª. –ò–º—è –ê–≤–∞–π–µ ‚Äì —ç—Ç–æ –≤–µ—á–Ω–æ–µ –±—ã—Ç–∏–µ, —ç—Ç–æ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏–ª–∞, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–π –≤—Å—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±—ã—Ç–∏—è.',
      stage: '–ë—ã—Ç–∏–µ',
      stageColor: 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200'
    },
    { 
      title: '–ß–µ—Ç—ã—Ä–µ –±—É–∫–≤—ã', 
      instruction: '–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å –ò–º—è –ê–≤–∞–π–µ —Ç–∞–∫, –∫–∞–∫ –æ–Ω–æ –ø–∏—à–µ—Ç—Å—è, –º—ã –º–æ–∂–µ–º –º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–¥ –µ–≥–æ —á–µ—Ç—ã—Ä—å–º—è –±—É–∫–≤–∞–º–∏ –π—É–¥, —Ö–µ–π, –≤–∞–≤, —Ö–µ–π: ◊ô ‚Äì ◊î ‚Äì ◊ï ‚Äì ◊î',
      stage: '–ë—É–∫–≤—ã',
      stageColor: 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200'
    },
    { 
      title: '–ë—É–∫–≤–∞ –ô—É–¥', 
      instruction: '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ –ò–º–µ–Ω–∏ –ê–≤–∞–π–µ, –±—É–∫–≤–µ –π—É–¥: ◊ô. –û–Ω–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ–∑–Ω–∞–Ω–∏–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –≤—Å–µ–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –ë–æ–≥–∞. –ù–µ—Ç –Ω–∏–∫–æ–≥–æ –∏ –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ –ù–µ–≥–æ, –∫–∞–∫ –∏ –Ω–µ—Ç –º–µ—Å—Ç–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ—Ç –ï–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è. ¬´–°–ª—É—à–∞–π, –ò–∑—Ä–∞–∏–ª—å –ê–≤–∞–π–µ ‚Äì –ë–æ–≥ –Ω–∞—à, –ê–≤–∞–π–µ –û–¥–∏–Ω¬ª.',
      stage: '–ô—É–¥',
      stageColor: 'bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200'
    },
    { 
      title: '–ë—É–∫–≤–∞ –•–µ–π (–ø–µ—Ä–≤–∞—è)', 
      instruction: '–ü–µ—Ä–µ–π–¥–µ–º —Ç–µ–ø–µ—Ä—å –∫ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –Ω–∞–¥ –≤—Ç–æ—Ä–æ–π –±—É–∫–≤–æ–π –ò–º–µ–Ω–∏ –ê–≤–∞–π–µ, –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π —Ö–µ–π: ◊î. –≠—Ç–æ —Å–æ–∑–Ω–∞–Ω–∏–µ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç–≤–æ—Ä–µ–Ω–∏—è. –ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∫ –≤—Å–µ –º–∏—Ä–æ–∑–¥–∞–Ω–∏–µ, –≤–∫–ª—é—á–∞—è –∏ –≤–∞—Å —Å–∞–º–∏—Ö —Ç–≤–æ—Ä–∏—Ç—Å—è –∫–∞–∂–¥—ã–π –º–∏–≥ –∏–∑ –Ω–∏—á–µ–≥–æ, –∏ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å.',
      stage: '–•–µ–π 1',
      stageColor: 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200'
    },
    { 
      title: '–ë—É–∫–≤–∞ –í–∞–≤', 
      instruction: '–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –Ω–∞–¥ —Ç—Ä–µ—Ç—å–µ–π –±—É–∫–≤–æ–π –ò–º–µ–Ω–∏ –ê–≤–∞–π–µ, –±—É–∫–≤–æ–π –≤–∞–≤: ◊ï. –≠—Ç–æ —Å–æ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –≤–µ–ª–∏–∫–æ–º—É –µ–¥–∏–Ω–æ–º—É —Ü–µ–ª–æ–º—É. –û—â—É—Ç–∏—Ç–µ –º–∏—Ä–æ–∑–¥–∞–Ω–∏–µ –∫–∞–∫ –æ–¥–Ω–æ –≥–∏–≥–∞–Ω—Ç—Å–∫–æ–µ —Ü–µ–ª–æ–µ. –ù–∏–∫–∞–∫–∞—è –µ–µ —á–∞—Å—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å–∞–º–∞ –ø–æ —Å–µ–±–µ.',
      stage: '–í–∞–≤',
      stageColor: 'bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-200'
    },
    { 
      title: '–ë—É–∫–≤–∞ –•–µ–π (–≤—Ç–æ—Ä–∞—è)', 
      instruction: '–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –Ω–∞–¥ —á–µ—Ç–≤–µ—Ä—Ç–æ–π –±—É–∫–≤–æ–π –ò–º–µ–Ω–∏ –ê–≤–∞–π–µ, –≤—Ç–æ—Ä–æ–π –±—É–∫–≤–æ–π —Ö–µ–π: ◊î. –≠—Ç–æ —Å–æ–∑–Ω–∞–Ω–∏–µ —Å–µ–±—è –∫–∞–∫ –æ–¥–Ω–æ–≥–æ, –æ—Ç–¥–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É—É–º–∞. –ß–µ–ª–æ–≤–µ–∫—É —Å–ª–µ–¥—É–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–æ–∑–Ω–∞–≤–∞—Ç—å —Å–≤–æ—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –∏–±–æ –æ–Ω —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç —Å–≤–æ–±–æ–¥–æ–π –≤—ã–±–æ—Ä–∞.',
      stage: '–•–µ–π 2',
      stageColor: 'bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200'
    },
    { 
      title: '–ï–¥–∏–Ω—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π', 
      instruction: '–ò, –Ω–∞–∫–æ–Ω–µ—Ü, –ø—Ä–∏–¥–∏—Ç–µ –∫ –æ—Å–æ–∑–Ω–∞–Ω–∏—é —Ç–æ–≥–æ, —á—Ç–æ –≤—Å–µ —ç—Ç–∏ —á–µ—Ç—ã—Ä–µ —É—Ä–æ–≤–Ω—è —Å–æ–∑–Ω–∞–Ω–∏—è, –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –µ–¥–∏–Ω—ã.',
      stage: '–ï–¥–∏–Ω—Å—Ç–≤–æ',
      stageColor: 'bg-pink-100 dark:bg-pink-900 text-pink-800 dark:text-pink-200'
    },
    { 
      title: '–®–º–∞ –ò—Å—Ä–∞—ç–ª—å', 
      instruction: '–°–∫–∞–∂–∏—Ç–µ –µ—â–µ —Ä–∞–∑: –®–º–∞ –ò—Å—Ä–∞—ç–ª—å! –ê–¥–æ-–Ω–∞–π ‚Äì –≠–ª–æ-—Ö–µ–π–Ω—É, –ê–¥–æ-–Ω–∞–π —ç—Ö–∞–¥. –°–ª—É—à–∞–π, –ò–∑—Ä–∞–∏–ª—å –ê–≤–∞–π–µ ‚Äì –ë–æ–≥ –Ω–∞—à, –ê–≤–∞–π–µ –û–¥–∏–Ω.',
      stage: '–®–º–∞',
      stageColor: 'bg-teal-100 dark:bg-teal-900 text-teal-800 dark:text-teal-200'
    }
  ];

  constructor(private location: Location) {}

  ngOnDestroy() {
    window.speechSynthesis.cancel();
  }

  goBack() {
    window.speechSynthesis.cancel();
    this.location.back();
  }

  toggleVoice() {
    this.isVoiceEnabled = !this.isVoiceEnabled;
    if (!this.isVoiceEnabled) {
      window.speechSynthesis.cancel();
    }
  }

  speak(text: string) {
    if (this.isVoiceEnabled && 'speechSynthesis' in window) {
      window.speechSynthesis.cancel();
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'ru-RU';
      utterance.rate = 0.8;
      window.speechSynthesis.speak(utterance);
    }
  }

  startPractice() {
    this.isPracticeStarted = true;
    this.currentStepIndex = 0;
    this.speak(this.practiceSteps[0].instruction);
  }

  nextStep() {
    if (this.currentStepIndex < this.practiceSteps.length - 1) {
      this.currentStepIndex++;
      this.speak(this.practiceSteps[this.currentStepIndex].instruction);
    }
  }

  previousStep() {
    if (this.currentStepIndex > 0) {
      this.currentStepIndex--;
      this.speak(this.practiceSteps[this.currentStepIndex].instruction);
    }
  }

  finishPractice() {
    this.currentStepIndex = this.practiceSteps.length; // Move to rating step
    window.speechSynthesis.cancel();
  }

  exitPractice() {
    this.location.back();
  }

  getRatingFace(): string {
    if (this.userRating == 10) return 'ü§©';
    if (this.userRating >= 9) return 'üòÅ';
    if (this.userRating >= 8) return 'üòÑ';
    if (this.userRating >= 7) return 'üòä';
    if (this.userRating >= 6) return 'üôÇ';
    if (this.userRating >= 5) return 'üòê';
    if (this.userRating >= 4) return 'üòï';
    if (this.userRating >= 3) return 'üòü';
    if (this.userRating >= 2) return 'üò¢';
    return 'üò≠';
  }
}
