import { Component, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Location } from '@angular/common';
import { PracticeService } from '../../../../core/services/practice.service';

interface PracticeStep {
  title: string;
  instruction: string;
}

@Component({
  selector: 'app-creator-space-practice',
  templateUrl: './creator-space-practice.component.html',
  standalone: true,
  imports: [CommonModule, FormsModule]
})
export class CreatorSpacePracticeComponent implements OnDestroy {
  isPracticeStarted = false;
  currentStepIndex = 0;
  userRating = 5;
  isVoiceEnabled = true;
  
  stepDurationOptions = [10, 15, 30, 60];
  practiceDurationOptions = [1, 2, 5, 10, 15, 20, 30, 60];
  mainPracticeStepIndex = 9; // The step where the main practice begins

  stepTimer: number = 30;
  practiceTimer: number = 0;
  selectedStepDuration: number = 30;
  selectedPracticeDuration: number = 1;

  stepInterval: any;
  practiceInterval: any;
  audio = new Audio('/assets/sound/bell.mp3');

  practiceSteps: PracticeStep[] = [
    { title: '–®–∞–≥ 1: –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ', instruction: '–ü–æ—á—É–≤—Å—Ç–≤—É–π –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, —Å–µ–±—è –∏ —Å–≤–æ–µ —Ç–µ–ª–æ.' },
    { title: '–®–∞–≥ 2: –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π', instruction: '–û—Ç–º–µ—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π –∏ —Å–µ–±—è.' },
    { title: '–®–∞–≥ 3: –ü–æ–∑–∞–¥–∏ —Ç–µ–±—è', instruction: '–û—Ç–º–µ—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–∑–∞–¥–∏ —Å–µ–±—è –∏ —Å–µ–±—è.' },
    { title: '–®–∞–≥ 4: –°–ª–µ–≤–∞', instruction: '–û—Ç–º–µ—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–ª–µ–≤–∞ –æ—Ç —Å–µ–±—è –∏ —Å–µ–±—è.' },
    { title: '–®–∞–≥ 5: –°–ø—Ä–∞–≤–∞', instruction: '–û—Ç–º–µ—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Å–µ–±—è –∏ —Å–µ–±—è.' },
    { title: '–®–∞–≥ 6: –°–≤–µ—Ä—Ö—É', instruction: '–û—Ç–º–µ—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–≤–µ—Ä—Ö—É –æ—Ç —Å–µ–±—è –∏ —Å–µ–±—è.' },
    { title: '–®–∞–≥ 7: –°–Ω–∏–∑—É', instruction: '–û—Ç–º–µ—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–Ω–∏–∑—É –æ—Ç —Å–µ–±—è –∏ —Å–µ–±—è.' },
    { title: '–®–∞–≥ 8: –ö—É–±', instruction: '–û—Ç–º–µ—Ç—å –≤—Å–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –∏ —Å–µ–±—è –≤–Ω—É—Ç—Ä–∏, —Ñ–æ—Ä–º–∏—Ä—É—è –∫—É–±.' },
    { title: '–®–∞–≥ 9: –í–æ–ø—Ä–æ—Å –∫ –¢–≤–æ—Ä—Ü—É', instruction: '–£–¥–µ—Ä–∂–∏–≤–∞—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ–º –Ω–∞–π–¥–∏ –≤ —ç—Ç–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –¢–≤–æ—Ä—Ü–∞"' },
    { title: '–®–∞–≥ 10: –ï–¥–∏–Ω–µ–Ω–∏–µ', instruction: '–£–¥–µ—Ä–∂–∏–≤–∞—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ–º —Å—Ç—Ä–∞—Å—Ç–Ω–æ –∂–µ–ª–∞–π –ø—Ä–∏–ª–µ–ø–∏—Ç—å—Å—è –∫ –¢–≤–æ—Ä—Ü—É –∏ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–ª–µ–ø–ª–µ–Ω–∏—è –Ω–∞–≤–µ—á–Ω–æ. –°–æ–∫—Ä–∞—â–∞–π –≤—Å–µ –º—ã—Å–ª–∏, –æ—Ç—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–±—è –æ—Ç –µ–¥–∏–Ω—Å—Ç–≤–∞ —Å –ù–∏–º.' },
    { title: '–®–∞–≥ 11: –û—Ü–µ–Ω–∫–∞', instruction: '–û—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ.' }
  ];

  constructor(private location: Location, private practiceService: PracticeService) {}

  ngOnDestroy() {
    this.clearAllTimers();
    window.speechSynthesis.cancel();
  }

  goBack() {
    this.clearAllTimers();
    window.speechSynthesis.cancel();
    this.location.back();
  }

  toggleVoice() {
    this.isVoiceEnabled = !this.isVoiceEnabled;
    if (!this.isVoiceEnabled) {
      window.speechSynthesis.cancel();
    }
  }

  speak(text: string) {
    if (!this.isVoiceEnabled) return;
    window.speechSynthesis.cancel(); // Stop any previous speech
    const utterance = new SpeechSynthesisUtterance(text.replace(/<[^>]*>/g, ''));
    utterance.lang = 'ru-RU';
    utterance.rate = 0.9;
    window.speechSynthesis.speak(utterance);
  }

  getMinuteWord(minutes: number): string {
    const lastDigit = minutes % 10;
    const lastTwoDigits = minutes % 100;
    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
      return '–º–∏–Ω—É—Ç';
    }
    if (lastDigit === 1) {
      return '–º–∏–Ω—É—Ç—ã';
    }
    if (lastDigit >= 2 && lastDigit <= 4) {
      return '–º–∏–Ω—É—Ç';
    }
    return '–º–∏–Ω—É—Ç';
  }

  getInstruction(): string {
    const step = this.practiceSteps[this.currentStepIndex];
    let instruction = step.instruction;
    // For steps 2 to 8 (indices 1 to 7)
    if (this.currentStepIndex >= 1 && this.currentStepIndex <= 7) {
      const holdText = this.currentStepIndex === 7 ? '–≤—Å–µ —Ç–æ—á–∫–∏' : '—ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ';
      instruction += ` –£–¥–µ—Ä–∂–∏–≤–∞–π ${holdText} –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ ${this.selectedStepDuration} —Å–µ–∫—É–Ω–¥.`;
    }
    // For step 10 (index 9)
    if (this.currentStepIndex === 9) {
      const minuteWord = this.getMinuteWord(this.selectedPracticeDuration);
      instruction += ` –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ ${this.selectedPracticeDuration} ${minuteWord}.`;
    }
    return instruction;
  }

  startPractice() {
    this.isPracticeStarted = true;
    this.currentStepIndex = 0;
    this.startStepTimer();
    this.speak(this.getInstruction());
  }

  setStepDuration(seconds: number) {
    this.selectedStepDuration = seconds;
  }

  setPracticeDuration(minutes: number) {
    this.selectedPracticeDuration = minutes;
  }

  startStepTimer() {
    this.stepTimer = this.selectedStepDuration;
    this.stepInterval = setInterval(() => {
      this.stepTimer--;
      if (this.stepTimer < 0) {
        this.nextStep();
      }
    }, 1000);
  }

  startPracticeTimer() {
    this.practiceTimer = this.selectedPracticeDuration * 60;
    this.practiceInterval = setInterval(() => {
      this.practiceTimer--;
      if (this.practiceTimer < 0) {
        this.finishPractice();
      }
    }, 1000);
  }

  nextStep() {
    this.clearAllTimers();
    if (this.currentStepIndex < this.practiceSteps.length - 1) {
      this.currentStepIndex++;
      if (this.currentStepIndex < this.practiceSteps.length - 1) {
        this.speak(this.getInstruction());
      }
      if (this.currentStepIndex < this.mainPracticeStepIndex) {
        this.startStepTimer();
      } else if (this.currentStepIndex === this.mainPracticeStepIndex) {
        this.startPracticeTimer();
      }
    }
  }

  previousStep() {
    this.clearAllTimers();
    if (this.currentStepIndex > 0) {
      this.currentStepIndex--;
      this.speak(this.getInstruction());
      if (this.currentStepIndex < this.mainPracticeStepIndex) {
        this.startStepTimer();
      } else if (this.currentStepIndex === this.mainPracticeStepIndex) {
        this.startPracticeTimer();
      }
    }
  }

  finishPractice() {
    this.clearAllTimers();
    this.audio.play();
    this.currentStepIndex = this.practiceSteps.length - 1; // Move to rating step
    window.speechSynthesis.cancel();
  }

  exitPractice() {
    this.practiceService.saveLastPractice({ name: '–ú–∞–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å –¢–≤–æ—Ä—Ü–æ–º', route: '/practices/small-state/creator-space' });
    this.practiceService.recordPracticeCompletion();
    this.goBack();
  }

  getRatingFace(): string {
    if (this.userRating == 10) return 'ü§©';
    if (this.userRating >= 9) return 'üòÅ';
    if (this.userRating >= 8) return 'üòÑ';
    if (this.userRating >= 7) return 'üòä';
    if (this.userRating >= 6) return 'üôÇ';
    if (this.userRating >= 5) return 'üòê';
    if (this.userRating >= 4) return 'üòï';
    if (this.userRating >= 3) return 'üòü';
    if (this.userRating >= 2) return 'üò¢';
    return 'üò≠';
  }

  clearAllTimers() {
    clearInterval(this.stepInterval);
    clearInterval(this.practiceInterval);
  }
}
